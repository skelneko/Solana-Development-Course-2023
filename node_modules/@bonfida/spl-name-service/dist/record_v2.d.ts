/// <reference types="node" />
import { Record } from "./types/record";
import { Connection, PublicKey } from "@solana/web3.js";
/**
 * A map that associates each record type with a public key, known as guardians.
 */
export declare const GUARDIANS: Map<Record, PublicKey>;
/**
 * Set of records that utilize secp256k1 for verification purposes
 */
export declare const ETH_ROA_RECORDS: Set<Record>;
/**
 * This function verifies the staleness of a record.
 * @param {Connection} connection - The Solana RPC connection object
 * @param {Record} record - The record to be verified.
 * @param {string} domain - The domain associated with the record.
 * @returns {Promise<boolean>} - Returns a promise that resolves to a boolean indicating whether the record is stale.
 */
export declare const verifyStaleness: (connection: Connection, record: Record, domain: string) => Promise<boolean>;
/**
 *
 * This function verifies the right of association of a record.
 * Note: This function does not verify if the record is stale.
 * Users must verify staleness in addition to the right of association.
 * @param {Connection} connection - The Solana RPC connection object
 * @param {Record} record - The record to be verified.
 * @param {string} domain - The domain associated with the record.
 * @param {Buffer} verifier - The optional verifier to be used in the verification process.
 * @returns {Promise<boolean>} - Returns a promise that resolves to a boolean indicating whether the record has the right of association.
 */
export declare const verifyRightOfAssociation: (connection: Connection, record: Record, domain: string, verifier?: Buffer) => Promise<boolean>;
/**
 * Set of records that are UTF-8 encoded strings
 */
export declare const UTF8_ENCODED: Set<Record>;
/**
 * Set of records that are self signed i.e signed by the public key contained
 * in the record itself.
 */
export declare const SELF_SIGNED: Set<Record>;
/**
 * This function deserializes a buffer based on the type of record it corresponds to
 * If the record is not properly serialized according to SNS-IP 1 this function will throw an error
 * @param content The content to deserialize
 * @param record The type of record
 * @returns The deserialized content as a string
 */
export declare const deserializeRecordV2Content: (content: Buffer, record: Record) => string;
/**
 * This function serializes a string based on the type of record it corresponds to
 * The serialization follows the SNS-IP 1 guideline
 * @param content The content to serialize
 * @param record The type of record
 * @returns The serialized content as a buffer
 */
export declare const serializeRecordV2Content: (content: string, record: Record) => Buffer;
/**
 * This function derives a record v2 key
 * @param domain The .sol domain name
 * @param record The record to derive the key for
 * @returns Public key of the record
 */
export declare const getRecordV2Key: (domain: string, record: Record) => PublicKey;
